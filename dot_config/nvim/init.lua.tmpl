vim.g.mapleader = ","
vim.g.maplocalleader = ","

vim.opt.hidden = true
vim.opt.termguicolors = true
vim.opt.background = "dark"
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.list = true
vim.opt.listchars = 'tab:..,trail:_,extends:>,precedes:<,nbsp:~'
vim.opt.smartcase = true
vim.opt.ignorecase = true
vim.opt.textwidth = 80
vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.undofile = true
vim.opt.backupcopy = "yes"
vim.opt.wrap = true
vim.opt.linebreak = true
vim.opt.foldenable = false
vim.opt.foldmethod = 'manual'
vim.opt.foldlevelstart = 99
vim.opt.swapfile = false
vim.opt.clipboard = vim.opt.clipboard + "unnamed,unnamedplus"


vim.keymap.set('n', '<leader>f', '<cmd>Files<cr>')
vim.keymap.set('n', '<leader>r', '<cmd>Rg<cr>')
vim.keymap.set('n', '<leader>b', '<cmd>Buffers<cr>')
vim.keymap.set('n', '<leader>.', '<cmd>Oil<cr>')
vim.keymap.set('n', '<leader>vrc', '<cmd>e $MYVIMRC<cr>')

vim.keymap.set('ia', 'dts', vim.fn.strftime("%Y-%m-%d"))

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
	vim.fn.system({
		"git",
		"clone",
		"--filter=blob:none",
		"https://github.com/folke/lazy.nvim.git",
		"--branch=stable", -- latest stable release
		lazypath,
	})
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
	{
		"rose-pine/neovim",
		name = "rose-pine",
		lazy = false,
		priority = 1000,
		config = function()
			vim.cmd("colorscheme rose-pine")
			require("rose-pine").setup({
				variant = "dark"
			})
		end,
	},
	{
		"stevearc/oil.nvim",
		config = function()
			require("oil").setup({
				view_options = {
					show_hidden = true
				}
			})
		end,
	},
	{
		'junegunn/fzf.vim',
		dependencies = {
			'junegunn/fzf',
		},
		config = function()
			vim.g.fzf_layout = { down = '~25%' }
			vim.g.fzf_preview_window = {}
		end
	},
	{
		"neovim/nvim-lspconfig",
		lazy = true,
		ft = {
			"rust",
			"javascript",
			"javascriptreact",
			"typescript",
			"typescriptreact",
			"python",
			"yaml",
			"godot",
		},
		config = function ()
			vim.diagnostic.config({ virtual_text = true })
			vim.lsp.config('rust_analyzer', {
				settings = {
					['rust-analyzer'] = {
						cargo = {
							targetDir = "target/rust-analyzer"
						}
					}
				}
			})
			vim.lsp.enable("rust_analyzer")
			vim.lsp.enable("ts_ls")
			vim.lsp.enable("ruff")
			vim.lsp.enable("ty")
			vim.lsp.enable("yamlls")
			vim.lsp.enable('gdscript')

			vim.keymap.set('n', 'gd', vim.lsp.buf.definition, { noremap = true, silent = true })
			vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, { noremap = true, silent = true })

			-- auto format
			vim.api.nvim_create_autocmd("BufWritePre", {
				pattern = {
					"*.rs",
					"*.[jt]s",
					"*.[jt]sx",
					"*.py"
				},
				callback = function()
					vim.lsp.buf.format { async = false }
				end
			})
		end,
	},
	{
		"saghen/blink.cmp",
		build = "cargo build --release",
		lazy = true,
		ft = {
			"rust",
			"javascript",
			"javascriptreact",
			"typescript",
			"typescriptreact",
			"python",
			"yaml",
			"godot",
		},
		opts = {
			fuzzy = { implementation = "rust" },
		}
	},
	{ "tpope/vim-commentary" },
	{ "tpope/vim-fugitive" },
	{ "tpope/vim-obsession" },
	{ "tpope/vim-repeat" },
	{ "tpope/vim-rhubarb" },
	{ "tpope/vim-sleuth" },
	{ "tpope/vim-surround" },
})
